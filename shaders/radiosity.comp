#version 460 core
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

#include "defines.glsl"
#include "structs.glsl"

// could be replaced with many textures?
struct Sample {
    vec3 position;
    vec3 colour;
    vec3 normal;
};

// Compute shader workgroup size
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer SphereData { Sphere[] spheres; };
layout(set = 0, binding = 1) readonly buffer PlaneData { Plane[] planes; };
layout(set = 0, binding = 2) readonly buffer LightData { PointLight[] lights; };
layout(set = 0, binding = 3) readonly buffer VertexData { Vertex[] vertices; };
layout(set = 0, binding = 4) readonly buffer TriangleData {
    Triangle[] triangles;
};
layout(set = 0, binding = 5) readonly buffer MeshInstanceData {
    MeshInstance[] mesh_instances;
};

layout(set = 1, binding = 0) uniform sampler tex_samp;
layout(set = 1, binding = 1) uniform texture2D textures[];

layout(set = 2, binding = 0, rgba32f) uniform image2D current_emissives[];
layout(set = 3, binding = 0, rgba32f) uniform image2D new_emissives[];
layout(set = 4, binding = 0, rgba32f) uniform image2D lightmaps[];
layout(set = 5, binding = 0, rgba32f) uniform image2D sample_positions[];
layout(set = 6, binding = 0, rgba32f) uniform image2D sample_albedos[];
layout(set = 7, binding = 0, rgba32f) uniform image2D sample_normals[];
layout(set = 8, binding = 0, rgba32f) uniform image2D sample_sizes[];

layout(push_constant) uniform Constants { uint stage; }
constants;

// TODO: make sure to take into account material diffuse multiplier / currently
// doesn't conserve energy
// Maybe remove the += on lightmaps
// and look at how (my) other implementations remain stable over iterations
// TODO: far away sample points can be combined into one
// TODO: properly dealing with object sizes / patch sizes
// TODO: sample spheres with a repeating sampler
// TODO: constant resolution for lightmaps (base lightmap size on object size)

// TODO: remove this
vec3 sample_lightmap(uint lm_idx, vec2 uv) { return vec3(0.0); }

#include "colour.glsl"
#include "intersection.glsl"
#include "shading.glsl"

uint get_num_lightmaps() {
    return spheres.length() + planes.length() + mesh_instances.length();
}

void direct() {
    uvec2 pix_coord = gl_GlobalInvocationID.xy;
    uint obj_id = gl_GlobalInvocationID.z;

    if (obj_id >= get_num_lightmaps()) return;

    ivec2 resolution = imageSize(lightmaps[obj_id]);

    if (pix_coord.x >= resolution.x || pix_coord.y >= resolution.y) return;

    uint obj_idx = obj_id;

    // 0.0..1.0 uv coords
    vec2 uv = pix_coord / vec2(resolution.xy);
    vec2 pix_size = vec2(1.0) / vec2(resolution.xy);

    // Get object and properties
    vec3 sample_position = vec3(FLT_MAX);
    vec3 sample_albedo;
    vec3 sample_normal = vec3(FLT_MAX);
    vec2 sample_size;
    Material mat;

    if (obj_idx >= (spheres.length() + planes.length())) {
        obj_idx -= spheres.length() + planes.length();
        MeshInstance m = mesh_instances[obj_idx];
        mat = m.mat;
        // Go through all triangles of that mesh
        for (uint t = m.start_triangle_idx;
             t < (m.start_triangle_idx + m.num_triangles); t++) {
            Triangle triangle = triangles[t];

            Vertex v1 = vertices[m.start_vertex_idx + triangle.v1_idx];
            Vertex v2 = vertices[m.start_vertex_idx + triangle.v2_idx];
            Vertex v3 = vertices[m.start_vertex_idx + triangle.v3_idx];

            vec2 duv0 = v2.uv - v1.uv;
            vec2 duv1 = v3.uv - v1.uv;
            vec2 duv2 = (uv + 1.0 * pix_size) - v1.uv;

            float d00 = dot(duv0, duv0);
            float d01 = dot(duv0, duv1);
            float d11 = dot(duv1, duv1);
            float d20 = dot(duv2, duv0);
            float d21 = dot(duv2, duv1);
            float denom = d00 * d11 - d01 * d01;
            float invDenom = 1.0 / denom;
            float s = (d11 * d20 - d01 * d21) * invDenom;
            float w = (d00 * d21 - d01 * d20) * invDenom;
            float r = 1.0 - s - w;

            if (s < 0.0 || w < 0.0 || w > 1.0 || s > 1.0 || (w + s) > 1.0)
                continue;

            sample_normal =
                normalize((r * v1.normal) + (s * v2.normal) + (w * v3.normal));

            sample_position = m.position + (r * v1.position) +
                              (s * v2.position) + (w * v3.position);
            break;
        }

        if (sample_position.x < FLT_MAX) {
            sample_albedo = sample_texture(mat, uv);
            sample_size = vec2(2.0) / resolution;  // FIXME: not right

        } else {
            return;  // no corresponding position on mesh
        }
    }

    else if (obj_idx >= spheres.length()) {
        // Object is a plane
        obj_idx -= spheres.length();
        Plane plane = planes[obj_idx];
        mat = plane.mat;

        sample_size =
            vec2(plane.width / resolution.x, plane.height / resolution.y);

        vec3 tangent = plane.tangent;
        vec3 bitangent = cross(plane.normal, tangent);

        // add 0.5 to be in the middle of the sample
        vec3 tangent_vec =
            (plane.width * (uv.x - 0.5) + (0.5 * sample_size.x)) * tangent;
        vec3 bitangent_vec =
            (plane.height * (uv.y - 0.5) + (0.5 * sample_size.y)) * bitangent;

        // TODO: deal with texture scale properly
        sample_position = plane.position + tangent_vec + bitangent_vec;
        sample_albedo = sample_texture(mat, uv);
        sample_normal = plane.normal;
    } else {
        Sphere sphere = spheres[obj_idx];
        mat = sphere.mat;

        float theta = ((uv.x * 2.0) - 1.0) * PI;
        float phi = (uv.y - 0.5) * PI;

        sample_normal = vec3(sin(theta), sin(phi), -cos(theta));
        sample_position = sphere.position + (sphere.radius * sample_normal);
        sample_albedo = sample_texture(mat, uv);
        sample_size = vec2(0.25);  // FIXME: not right
    }

    // Save sample info
    imageStore(sample_positions[obj_id], ivec2(pix_coord),
               vec4(sample_position, 0.0));
    imageStore(sample_albedos[obj_id], ivec2(pix_coord),
               vec4(sample_albedo, 0.0));
    imageStore(sample_normals[obj_id], ivec2(pix_coord),
               vec4(sample_normal, 0.0));
    imageStore(sample_sizes[obj_id], ivec2(pix_coord),
               vec4(sample_size, 0.0, 0.0));

    // begin calculating direct lighting on this patch
    PointLight light = lights[0];  // TODO: multiple lights
    vec3 light_pos = light.position;
    float light_intensity = light.intensity;
    vec3 vec_to_light = light_pos - sample_position;
    vec3 vec_to_light_norm = normalize(vec_to_light);

    float dist_sqd = dot(vec_to_light, vec_to_light);
    float light_radiance = light_intensity / dist_sqd;

    Ray shadow_ray = Ray(sample_position + (sample_normal * EPSILON * 5.0),
                         vec_to_light_norm);

    float shade = cast_shadow_ray(shadow_ray, vec_to_light);

    float diffuse = shade * max(dot(sample_normal, vec_to_light_norm), 0.0) *
                    light_radiance;

    vec3 emission = sample_albedo * (diffuse + mat.emissive);
    vec3 incident = sample_albedo * mat.emissive;

    vec3 test = imageLoad(new_emissives[obj_id], ivec2(pix_coord)).xyz;

    imageStore(current_emissives[obj_id], ivec2(pix_coord),
               vec4(emission, 0.0));
    imageStore(lightmaps[obj_id], ivec2(pix_coord), vec4(incident, 0.0));
}

void indirect() {
    // TODO: pack lightmaps in execution? instead of using z id
    uvec2 pix_coord = gl_GlobalInvocationID.xy;  // TODO: rename
    uint obj_id = gl_GlobalInvocationID.z;

    if (obj_id >= get_num_lightmaps()) return;

    ivec2 resolution = imageSize(lightmaps[obj_id]);

    if (pix_coord.x >= resolution.x || pix_coord.y >= resolution.y) return;

    // 0.0..1.0 uv coords
    vec2 uv = pix_coord / vec2(resolution.xy);

    // do radiosity

    vec3 sample_position =
        imageLoad(sample_positions[obj_id], ivec2(pix_coord)).xyz;
    vec3 sample_albedo =
        imageLoad(sample_albedos[obj_id], ivec2(pix_coord)).xyz;
    vec3 sample_normal =
        imageLoad(sample_normals[obj_id], ivec2(pix_coord)).xyz;
    vec2 sample_size = imageLoad(sample_sizes[obj_id], ivec2(pix_coord)).xy;

    vec3 incident = vec3(0.0);

    uint num_lightmaps = get_num_lightmaps();
    for (int i = 0; i < num_lightmaps; i++) {
        if (i == obj_id) {
            continue;  // no self illumination
        }
        vec2 lm_size = imageSize(lightmaps[i]);
        vec3 obj_incident = vec3(0.0);

        for (int x = 0; x < lm_size.x; x++) {
            for (int y = 0; y < lm_size.y; y++) {
                // patch that is lighting our target patch
                vec3 light_pos =
                    imageLoad(sample_positions[i], ivec2(x, y)).xyz;

                vec3 light_colour;
                if (constants.stage == 1) {
                    light_colour =
                        imageLoad(current_emissives[i], ivec2(x, y)).xyz;
                } else {
                    light_colour = imageLoad(new_emissives[i], ivec2(x, y)).xyz;
                }

                vec3 light_normal =
                    imageLoad(sample_normals[i], ivec2(x, y)).xyz;

                vec2 light_size = imageLoad(sample_sizes[i], ivec2(x, y)).xy;

                vec3 vec_to_light = light_pos - sample_position;
                vec3 vec_to_light_norm = normalize(vec_to_light);

                float dist_sqd = dot(vec_to_light, vec_to_light);

                Ray shadow_ray =
                    Ray(sample_position + (sample_normal * EPSILON * 5.0),
                        vec_to_light_norm);

                HitInfo hit = cast_ray(shadow_ray);

                vec3 delta = hit.position - light_pos;
                if (hit.normal.x < FLT_MAX && dot(delta, delta) < 0.01) {
                    /* compute lambertian attenuation of light from one patch to
                       another we calculate the dot product between each plane's
                       normal, and the vector between them. then we multiply
                       those numbers together */
                    float attenuation = dot(sample_normal, vec_to_light_norm) *
                                        -dot(light_normal, vec_to_light_norm);
                    // TODO: constant of 0.03 arbritrary
                    float diffuse = max(attenuation, 0.0) / max(dist_sqd, 0.03);

                    // also scale by patch size
                    obj_incident +=
                        light_colour * diffuse * (light_size.x * light_size.y);
                }
            }
        }
        incident += obj_incident;
    }
    // "because calculus"
    incident /= PI;

    vec3 old_lightmap_colour =
        imageLoad(lightmaps[obj_id], ivec2(pix_coord)).xyz;
    imageStore(lightmaps[obj_id], ivec2(pix_coord),
               vec4(old_lightmap_colour + incident, 0.0));

    if (constants.stage == 1) {
        imageStore(new_emissives[obj_id], ivec2(pix_coord),
                   vec4(incident * sample_albedo, 0.0));
    } else {
        imageStore(current_emissives[obj_id], ivec2(pix_coord),
                   vec4(incident * sample_albedo, 0.0));
    }
}

// TODO: specialisation constants? / just get rust program to swap buffers
void main() {
    if (constants.stage == 0) {
        direct();
    } else if (constants.stage == 1 || constants.stage == 2) {
        indirect();
    }
}