#version 460 core
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

#include "defines.glsl"
#include "structs.glsl"

const uint MAX_BOUNCES = 3;
const float COLOUR_DEPTH = 256.0;  // 2^8
const vec3 SKY_COLOUR = vec3(0.7);

// Compute shader workgroup size
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) writeonly uniform image2D img;

layout(set = 0, binding = 1) readonly buffer SphereData { Sphere data[]; }
spheres;
layout(set = 0, binding = 2) readonly buffer PlaneData { Plane data[]; }
planes;
layout(set = 0, binding = 3) readonly buffer LightData { PointLight data[]; }
lights;

layout(set = 1, binding = 0) uniform sampler samp;
layout(set = 1, binding = 1) uniform texture2D textures[];

layout(push_constant) uniform Constants {
    vec3 camera_position;
    float camera_zdepth;
    mat4 camera_rotation;  // sending a mat3 through push constants is buggy
}
constants;

#include "colour.glsl"
#include "intersection.glsl"
#include "shading.glsl"

vec3 render_pixel(vec2 uv) {
    float zdepth = constants.camera_zdepth;
    mat3 rot_mat = mat3(constants.camera_rotation);
    vec3 camera_pos = constants.camera_position;

    vec3 sky_colour = SKY_COLOUR;

    vec3 colour = vec3(0.0);
    vec3 transmission = vec3(1.0);

    vec3 ray_pos = camera_pos;
    vec3 dir = normalize(vec3(uv, zdepth) * rot_mat);

    for (int i = 0; i < MAX_BOUNCES; i++) {
        HitInfo hit = cast_ray(Ray(ray_pos, dir));

        if (hit.normal.x < FLT_MAX) {
            colour += shade_object(dir, hit, transmission);

            if (hit.mat.reflectivity > 1e-3) {
                dir = reflect(dir, hit.normal);
                ray_pos =
                    hit.position + (dir * EPSILON * 3.0);  // nudge position
            } else {
                break;
            }

        } else {
            colour += transmission * sky_colour;
            break;
        }
    }

    return colour;
}

void main() {
    uvec2 pix_coord = gl_GlobalInvocationID.xy;
    if (pix_coord.x >= imageSize(img).x || pix_coord.y >= imageSize(img).y) {
        return;
    }

    // -0.5..0.5 uv coords
    vec2 uv =
        (pix_coord - (vec2(imageSize(img).xy / 2.0))) / vec2(imageSize(img).y);
    uv.y = -uv.y;

    vec3 colour = aces_tonemap(render_pixel(uv));
    colour += dither(pix_coord, COLOUR_DEPTH);

    imageStore(img, ivec2(pix_coord), vec4(colour, 0.0));
}