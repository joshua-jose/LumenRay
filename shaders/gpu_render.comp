#version 460 core
#extension GL_EXT_nonuniform_qualifier : enable

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38
#define DBL_MAX 1.7976931348623158e+308
#define DBL_MIN 2.2250738585072014e-308
#define EPSILON 0.001
#define UINT_MAX 4294967295
#define TAU 6.283185307

const uint MAX_BOUNCES = 3;

// Data Structures
struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Material {
    uint tex_id;

    float ambient;
    float diffuse;
    float specular;
    float shininess;
    float reflectivity;
    float emissive;
};

struct HitInfo {
    vec3 position;
    vec3 normal;
    Material mat;
    vec3 colour;
};

struct Sphere {
    vec3 position;
    float radius;
    Material mat;
};

struct Plane {
    vec3 position;
    vec3 normal;
    vec3 tangent;
    Material mat;
};

struct PointLight {
    vec3 position;
    float intensity;
};

struct Camera {
    vec3 position;
    mat3 rotation;
    float zdepth;
};

const Material NULL_MAT = Material(0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

// Compute shader workgroup size
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) writeonly uniform image2D img;

layout(set = 0, binding = 1) readonly buffer SphereData { Sphere data[]; }
spheres;
layout(set = 0, binding = 2) readonly buffer PlaneData { Plane data[]; }
planes;
layout(set = 0, binding = 3) readonly buffer LightData { PointLight data[]; }
lights;

layout(set = 1, binding = 0) uniform sampler samp;
layout(set = 1, binding = 1) uniform texture2D textures[];

layout(push_constant) uniform Constants {
    vec3 camera_position;
    float camera_zdepth;
    mat4 camera_rotation;  // sending a mat3 through push constants is buggy
}
constants;

float ray_sphere_intersect(Ray ray, Sphere sphere) {
    // vector from sphere center to ray origin.
    vec3 c_to_o = ray.origin - sphere.position;

    // quadratic formula constants for line-sphere intersection
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, c_to_o);
    float c = dot(c_to_o, c_to_o) - (sphere.radius * sphere.radius);

    float d0 = FLT_MAX, d1 = FLT_MAX;

    // distance of two intersection points
    float discrim = (b * b) - (4.0 * a * c);

    if (discrim >= 0.0) {
        // now solve the quadratic, using a more stable computer friendly
        // formula

        // if the discrim is close to 0, use a faster formula ignoring
        // discrim. This can be optimised by being looser on what is "close"
        // to zero.
        if (abs(discrim) <= EPSILON) {
            d0 = -0.5 * b / a;
            d1 = d0;
        } else {
            float sqrt_discrim = sqrt(discrim);
            float q = -0.5 * (b + (sign(b) * sqrt_discrim));
            d0 = q / a;
            d1 = c / q;
        }

        if (d0 > d1) {
            float temp = d0;
            d0 = d1;
            d1 = temp;
        };

        // negative distances mean we intersect behind, we want d0 to be the
        // positive intersection
        if (d0 < 0.0) {
            d0 = d1;
            if (d0 < 0.0) {
                d0 = FLT_MAX;
            }
        }
    }
    return d0;
}

float ray_plane_intersect(Ray ray, Plane plane) {
    float denom = -dot(plane.normal, ray.direction);

    if (denom > 1e-6) {
        vec3 to_plane = plane.position - ray.origin;
        float d = dot(to_plane, -plane.normal) / denom;

        if (d >= 0.0) {
            return d;
        } else {
            return FLT_MAX;
        }

    } else {
        return FLT_MAX;
    }
}

HitInfo cast_ray(Ray ray) {
    float least_dist = FLT_MAX;
    uint hit_idx = UINT_MAX;
    uint hit_obj = UINT_MAX;

    for (int i = 0; i < spheres.data.length(); i++) {
        float obj_dist = ray_sphere_intersect(ray, spheres.data[i]);
        if (obj_dist < least_dist) {
            least_dist = obj_dist;
            hit_idx = i;
            hit_obj = 0;  // TODO: replace with var
        }
    }

    for (int i = 0; i < planes.data.length(); i++) {
        float obj_dist = ray_plane_intersect(ray, planes.data[i]);
        if (obj_dist < least_dist) {
            least_dist = obj_dist;
            hit_idx = i;
            hit_obj = 1;  // TODO: replace with var
        }
    }

    if (least_dist < FLT_MAX) {
        vec3 position = ray.origin + (least_dist * ray.direction);
        vec3 normal;
        Material mat;
        vec2 uv;

        if (hit_obj == 0) {
            Sphere sphere = spheres.data[hit_idx];
            normal = normalize(position - sphere.position);
            mat = sphere.mat;
            uv = vec2(0.5 + atan(normal.x, -normal.z) / TAU,
                      0.5 + (normal.y / 2.0));

        } else if (hit_obj == 1) {
            Plane plane = planes.data[hit_idx];
            normal = plane.normal;
            mat = plane.mat;

            float a = normal.x, b = normal.y, c = normal.z;

            vec3 tangent = plane.tangent;
            vec3 bitangent = cross(normal, tangent);

            uv = vec2(dot(tangent, position), dot(bitangent, position));
        }

        vec3 colour = texture(sampler2D(textures[mat.tex_id], samp), uv).xyz;

        return HitInfo(position, normal, mat, colour);

    } else {
        return HitInfo(vec3(FLT_MAX), vec3(FLT_MAX), NULL_MAT, vec3(FLT_MAX));
    }
}

float phong(vec3 normal, vec3 vec_to_light, vec3 view_direction,
            float light_intensity, Material mat) {
    float dist_sqd = dot(vec_to_light, vec_to_light);
    float light_radiance = light_intensity / dist_sqd;
    vec3 vec_to_light_norm = vec_to_light / sqrt(dist_sqd);

    vec3 light_reflection = reflect(vec_to_light_norm, normal);

    float diffuse = max(dot(vec_to_light_norm, normal), 0.0);
    float specular = 0.0;

    if (diffuse > 0.0) {
        specular =
            pow(max(dot(light_reflection, view_direction), 0.0), mat.shininess);
    }
    return light_radiance * (mat.diffuse * diffuse + mat.specular * specular);
}

vec3 shade_object(vec3 direction, HitInfo info, inout vec3 transmission) {
    PointLight light = lights.data[0];
    vec3 light_pos = light.position;
    float light_intensity = light.intensity;

    Material mat = info.mat;
    vec3 obj_col = info.colour;

    vec3 vec_to_light = light_pos - info.position;
    vec3 position = info.position;
    vec3 normal = info.normal;

    Ray shadow_ray = Ray(position + (normal * EPSILON * 5.0), vec_to_light);
    HitInfo shadow_info = cast_ray(shadow_ray);  // TODO: cheaper cast, less
                                                 // info

    float shade;  // TODO: soft shadows
    vec3 shadow_vec = shadow_info.position - position;

    if (dot(shadow_vec, shadow_vec) > dot(vec_to_light, vec_to_light)) {
        shade = 1.0;
    } else {
        shade = 0.0;
    }

    // Cheap fresnel
    // TODO: make more physically correct
    float fx = clamp(1.0 - dot(normal, -direction), 0.0, 1.0);
    float fresnel = fx * fx * fx * fx * fx;

    // The amount the object this way was reflected off modifies the colour
    vec3 last_transmission = transmission;
    transmission *=
        clamp(fresnel + mat.reflectivity, 0.0, 1.0) * obj_col;  // obj_colour

    return last_transmission * obj_col *
           (mat.ambient + shade * phong(normal, vec_to_light, direction,
                                        light_intensity, mat));
}

vec3 render_pixel(vec2 uv) {
    float zdepth = constants.camera_zdepth;
    mat3 rot_mat = mat3(constants.camera_rotation);
    vec3 camera_pos = constants.camera_position;

    vec3 sky_colour = vec3(0.7);

    vec3 colour = vec3(0.0);
    vec3 transmission = vec3(1.0);

    vec3 ray_pos = camera_pos;
    vec3 dir = normalize(vec3(uv, zdepth) * rot_mat);

    for (int i = 0; i < MAX_BOUNCES; i++) {
        HitInfo hit = cast_ray(Ray(ray_pos, dir));

        if (hit.normal.x < FLT_MAX) {
            colour += shade_object(dir, hit, transmission);

            if (hit.mat.reflectivity > 1e-3) {
                dir = reflect(dir, hit.normal);
                ray_pos =
                    hit.position + (dir * EPSILON * 3.0);  // nudge position
            } else {
                break;
            }

        } else {
            colour += transmission * sky_colour;
            break;
        }
    }

    return colour;
}

vec3 aces_tonemap(vec3 color) {
    mat3 m1 = mat3(0.59719, 0.07600, 0.02840, 0.35458, 0.90834, 0.13383,
                   0.04823, 0.01566, 0.83777);
    mat3 m2 = mat3(1.60475, -0.10208, -0.00327, -0.53108, 1.10813, -0.07276,
                   -0.07367, -0.00605, 1.07602);
    vec3 v = m1 * color;
    vec3 a = v * (v + 0.0245786) - 0.000090537;
    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;

    // vec3 col = clamp(m2 * (a / b), 0.0, 1.0);
    vec3 col = m2 * (a / b);

    return col;
    // return toSRGB(col);	// gamma corrected
}

vec3 ACESFilm(vec3 x) {
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

void main() {
    if (gl_GlobalInvocationID.x >= imageSize(img).x ||
        gl_GlobalInvocationID.y >= imageSize(img).y) {
        return;
    }

    // -0.5..0.5 uv coords
    vec2 uv = (gl_GlobalInvocationID.xy - (vec2(imageSize(img).xy / 2.0))) /
              vec2(imageSize(img).y);
    uv.y = -uv.y;

    vec3 colour = aces_tonemap(render_pixel(uv));

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(colour, 0.0));
}