#version 460 core
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

#include "defines.glsl"
#include "structs.glsl"

const uint MAX_BOUNCES = 3;
const float COLOUR_DEPTH = 256.0;  // 2^8
const vec3 SKY_COLOUR = vec3(0.7);

// Compute shader workgroup size
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) writeonly uniform image2D img;

layout(set = 0, binding = 1) readonly buffer SphereData { Sphere[] spheres; };
layout(set = 0, binding = 2) readonly buffer PlaneData { Plane[] planes; };
layout(set = 0, binding = 3) readonly buffer LightData { PointLight[] lights; };

layout(set = 0, binding = 4) readonly buffer VertexData { Vertex[] vertices; };
layout(set = 0, binding = 5) readonly buffer TriangleData {
    Triangle[] triangles;
};
layout(set = 0, binding = 6) readonly buffer MeshInstanceData {
    MeshInstance[] mesh_instances;
};

layout(set = 1, binding = 0) uniform sampler tex_samp;
layout(set = 1, binding = 1) uniform texture2D textures[];

layout(set = 2, binding = 0) uniform sampler lm_samp;
layout(set = 2, binding = 1) uniform texture2D lightmaps[];

layout(push_constant) uniform Constants {
    vec3 camera_position;
    float camera_zdepth;
    mat4 camera_rotation;  // sending a mat3 through push constants is buggy
}
constants;

// from http://www.java-gaming.org/index.php?topic=35123.0
vec4 cubic(float v) {
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0 / 6.0);
}

// TODO: move this
// TODO: light map idx in material?
vec3 sample_lightmap(uint lm_idx, vec2 uv) {
    return texture(sampler2D(lightmaps[lm_idx], lm_samp), uv).xyz;

    /* vec2 texSize = textureSize(sampler2D(lightmaps[lm_idx], lm_samp), 0);
    vec2 invTexSize = 1.0 / texSize;

    uv = uv * texSize - 0.5;

    vec2 fxy = fract(uv);
    uv -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = uv.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = texture(sampler2D(lightmaps[lm_idx], lm_samp), offset.xz);
    vec4 sample1 = texture(sampler2D(lightmaps[lm_idx], lm_samp), offset.yz);
    vec4 sample2 = texture(sampler2D(lightmaps[lm_idx], lm_samp), offset.xw);
    vec4 sample3 = texture(sampler2D(lightmaps[lm_idx], lm_samp), offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy).xyz; */
}

#include "colour.glsl"
#include "intersection.glsl"
#include "shading.glsl"

vec3 render_pixel(vec2 uv) {
    float zdepth = constants.camera_zdepth;
    mat3 rot_mat = mat3(constants.camera_rotation);
    vec3 camera_pos = constants.camera_position;

    vec3 sky_colour = SKY_COLOUR;  // TODO: skymap

    vec3 colour = vec3(0.0);
    vec3 transmission = vec3(1.0);

    vec3 ray_pos = camera_pos;
    vec3 dir = normalize(vec3(uv, zdepth) * rot_mat);

    for (int i = 0; i < MAX_BOUNCES; i++) {
        HitInfo hit = cast_ray(Ray(ray_pos, dir));

        if (hit.normal.x < FLT_MAX) {
            colour += shade_object(dir, hit, transmission);

            if (hit.mat.reflectivity > 1e-3) {
                dir = reflect(dir, hit.normal);
                ray_pos =
                    hit.position + (dir * EPSILON * 3.0);  // nudge position
            } else {
                break;
            }

        } else {
            colour += transmission * sky_colour;
            break;
        }
    }

    return colour;
}

void main() {
    uvec2 pix_coord = gl_GlobalInvocationID.xy;
    if (pix_coord.x >= imageSize(img).x || pix_coord.y >= imageSize(img).y) {
        return;
    }

    // -0.5..0.5 uv coords
    vec2 uv =
        (pix_coord - (vec2(imageSize(img).xy / 2.0))) / vec2(imageSize(img).y);
    uv.y = -uv.y;

    /* vec2 delta1 = vec2(0.25 / imageSize(img).x, 0.25 / imageSize(img).y);
    vec2 delta2 = vec2(0.25 / imageSize(img).x, -0.25 / imageSize(img).y);
    vec2 delta3 = vec2(-0.25 / imageSize(img).x, 0.25 / imageSize(img).y);
    vec2 delta4 = vec2(-0.25 / imageSize(img).x, -0.25 / imageSize(img).y);

    vec3 colour =
        aces_tonemap((render_pixel(uv + delta1) + render_pixel(uv + delta2)
    + render_pixel(uv + delta3) + render_pixel(uv + delta4)) / 4.0); */

    vec3 colour = aces_tonemap(render_pixel(uv));

    colour += dither(pix_coord, COLOUR_DEPTH, colour);

    imageStore(img, ivec2(pix_coord), vec4(colour, 0.0));
}